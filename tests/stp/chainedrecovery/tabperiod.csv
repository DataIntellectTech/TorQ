action,ms,bytes,lang,code,repeat,minver,comment
before,0,0,q,.proc.sys "sleep 5",1,,"Sleep for 5 seconds"
before,0,0,q,.servers.startup[],1,,"Connect test proc to servers"
before,0,0,q,startproc["stp1"],1,,"Start segmented tickerplant in tabperiod mode"
before,0,0,q,startproc["stptabperiod1"],1,,"Start SCTP"
before,0,0,q,.proc.sys "sleep 2",1,,"Sleep for 2 seconds"
before,0,0,q,stpHandle:gethandle[`stp1],1,,"Open handle to segmented tickerplant"
before,0,0,q,sctpHandle:gethandle[`stptabperiod1],1,,"Open handle to SCTP"
before,0,0,q,sctpHandle".sctp.loggingmode:`create",1,,"Let SCTP create logs"
before,0,0,q,stpHandle(`.stplg.init;teststpdb),1,,"Switch test stplog directory"
before,0,0,q,sctpHandle(`.stplg.init;testsctpdb),1,,"Switch test sctplog directory"
before,0,0,q,sctpHandle"loghandles::exec tbl!handle from currlog",1,,"resetting loghandles definition for change of mode"
before,0,0,q,"stpHandle @/: `.u.upd ,/: ((`trade;testtrade);(`quote;testquote))",1,,"Send first updates to STP"
before,0,0,q,.proc.sys "sleep 2",1,,"Sleep for 2 seconds"
before,0,0,q,kill9proc["stptabperiod1"],1,,"Stop the segmented tickerplant"
before,0,0,q,.proc.sys "sleep 2",1,,"Sleep for 2 seconds"
true,0,0,q,not isalive["stptabperiod1"],1,,"Check segmented tickerplant is dead"
run,0,0,q,startproc["stptabperiod1"],1,,"Start segmented tickerplant"
run,0,0,q,.proc.sys "sleep 2",1,,"Sleep for 2 seconds"
run,0,0,q,sctpHandle:gethandle[`stptabperiod1],1,,"Open handle to segmented tickerplant"
run,0,0,q,sctpHandle".sctp.loggingmode:`create",1,,"Let SCTP create logs"
run,0,0,q,sctpHandle(`.stplg.init;testsctpdb),1,,"Switch test stplog directory"
run,0,0,q,sctpHandle"loghandles::exec tbl!handle from currlog",1,,"resetting loghandles definition for change of mode"
run,0,0,q,"stpHandle @/: `.u.upd ,/: ((`trade;testtrade);(`quote;testquote))",1,,"Send second updates to STP"
run,0,0,q,logstpdir:stpHandle(`.stplg.dldir),1,,"Get testlog directory"
run,0,0,q,logsctpdir:sctpHandle(`.stplg.dldir),1,,"Get testlog directory"
run,0,0,q,startproc each ("rdball";"rdbsymfilt";"rdbcomplexfilt"),1,,"Start all rdbs"
run,0,0,q,.proc.sys "sleep 2",1,,"Sleep for 2 seconds"
run,0,0,q,rdbHandles:`all`sym`complex!gethandle each `rdball`rdbsymfilt`rdbcomplexfilt,1,,"Open handles to RDBs"
true,0,0,q,(20 10 10)~(value rdbHandles) @\: "count trade",1,,"Check trade update published"
true,0,0,q,(20 0 10)~(value rdbHandles) @\: "count quote",1,,"Check quote update published"
true,0,0,q,all raze `GOOG=rdbHandles[`sym`complex] @\: "exec distinct sym from trade",1,,"Check filtered trade updates published"
true,0,0,q,rdbHandles[`complex]"all 50<exec bid from quote",1,,"Check quote update published in rdbcomplexfilt"
run,0,0,q,kill9proc each ("rdball";"rdbsymfilt";"rdbcomplexfilt"),1,,"Stop all rdbs"
run,0,0,q,.proc.sys "sleep 2",1,,"Sleep for 2 seconds"
true,0,0,q,all not isalive each ("rdball";"rdbsymfilt";"rdbcomplexfilt"),1,,"Check all rdbs are dead"
run,0,0,q,startproc each ("rdball";"rdbsymfilt";"rdbcomplexfilt"),1,,"Start all rdbs"
run,0,0,q,.proc.sys "sleep 2",1,,"Sleep for 2 seconds"
run,0,0,q,rdbHandles:`all`sym`complex!gethandle each `rdball`rdbsymfilt`rdbcomplexfilt,1,,"Open handles to RDBs"
true,0,0,q,(20 10 10)~(value rdbHandles) @\: "count trade",1,,"Check trade update published"
true,0,0,q,(20 0 10)~(value rdbHandles) @\: "count quote",1,,"Check quote update published"
true,0,0,q,all raze `GOOG=rdbHandles[`sym`complex] @\: "exec distinct sym from trade",1,,"Check filtered trade updates published"
true,0,0,q,rdbHandles[`complex]"all 50<exec bid from quote",1,,"Check quote update published in rdbcomplexfilt"
false,0,0,q,(`symbol$()) ~ (last each stpHandle".stplg.replaylog[`trade`quote]") except last each sctpHandle".stplg.replaylog[`trade`quote]",1,,"SCTP grabs its own logs when log mode = create"
after,0,0,q,.os.deldir logstpdir,1,,"Delete test segmented tickerplant logs"
after,0,0,q,.os.deldir logsctpdir,1,,"Delete test segmented chained tickerplant logs"
